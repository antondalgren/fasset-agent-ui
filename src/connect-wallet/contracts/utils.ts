import { contractsAddresses } from '@/resources/deployedContracts/contractsAddressesFallback';
import {
    contractsCoston2ReadFromNode,
    Coston2ContractsAddresses,
    deployedContractsCoston2
} from '@/resources/deployedContracts/Coston2DeployedContractsAddresses';
import {
    contractsCostonReadFromNode,
    CostonContractsAddresses,
    deployedContractsCoston
} from '@/resources/deployedContracts/CostonDeployedContractsAddresses';
import { contractsFlareReadFromNode, deployedContractsFlare, FlareContractsAddresses } from '@/resources/deployedContracts/FlareDeployedContractsAddresses';
import {
    contractsSongbirdReadFromNode,
    deployedContractsSongbird,
    SongbirdContractsAddresses
} from '@/resources/deployedContracts/SongbirdDeployedContractsAddresses';

// only autogenerated info about deployed contrat should be used in deployment (folder resources/deployedContracts)
// resources/deployedContracts/contractsAddressesFallback.ts can be used for development to test new contracts or if new contract addresses are not yet
// updated on backend. In that case set contractsReadFromNode to false (in file deployedContracts) and contract addresses from contractAddressesFallback.ts
// will be used

type availableNamesFlare = keyof typeof contractsAddresses.flare | typeof deployedContractsFlare[number];
export const getFlareContractAddress = (contractName: availableNamesFlare) => {
    if (contractsFlareReadFromNode) {
        return FlareContractsAddresses.get(contractName)?.address as string;
    }
    return contractsAddresses.flare[contractName as keyof typeof contractsAddresses.flare];
};

type availableNamesCoston2 = keyof typeof contractsAddresses.coston2 | typeof deployedContractsCoston2[number];
export const getCoston2ContractAddress = (contractName: availableNamesCoston2) => {
    if (contractsCoston2ReadFromNode) {
        return Coston2ContractsAddresses.get(contractName)?.address as string;
    }
    return contractsAddresses.coston2[contractName as keyof typeof contractsAddresses.coston2];
};

type availableNamesSongbird = keyof typeof contractsAddresses.songbird | typeof deployedContractsSongbird[number];
export const getSongbirdContractAddress = (contractName: availableNamesSongbird) => {
    if (contractsSongbirdReadFromNode) {
        return SongbirdContractsAddresses.get(contractName)?.address as string;
    } else {
        return contractsAddresses.songbird[contractName as keyof typeof contractsAddresses.songbird];
    }
};

type availableNamesCoston = typeof deployedContractsCoston[number] | keyof typeof contractsAddresses.coston;
export const getCostonContractAddress = (contractName: availableNamesCoston) => {
    if (contractsCostonReadFromNode) {
        return CostonContractsAddresses.get(contractName)?.address as string;
    } else {
        return contractsAddresses.coston[contractName as keyof typeof contractsAddresses.coston];
    }
};
